/* automatically generated by rust-bindgen */

use std::libc::*;
pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type Struct__IO_FILE = c_void;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
pub type __gnuc_va_list = __builtin_va_list;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type wint_t = c_uint;
pub struct Union_Unnamed1 {
    data: [u32, ..1u],
}
impl Union_Unnamed1 {
    pub fn __wch(&mut self) -> *mut c_uint {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __wchb(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct __mbstate_t {
    __count: c_int,
    __value: Union_Unnamed1,
}
pub type mbstate_t = __mbstate_t;
pub type Struct_tm = c_void;
pub struct Struct___locale_struct {
    __locales: [*mut Struct___locale_data, ..13u],
    __ctype_b: *c_ushort,
    __ctype_tolower: *c_int,
    __ctype_toupper: *c_int,
    __names: [*c_schar, ..13u],
}
pub type Struct___locale_data = c_void;
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type uint8 = c_uchar;
pub type int8 = c_schar;
pub type uint16 = c_ushort;
pub type int16 = c_short;
pub type uint32 = c_uint;
pub type int32 = c_int;
pub type intptr = c_long;
pub type uintptr = c_ulong;
pub type _bool = uint8;
pub type TCOD_list_t = *mut c_void;
pub struct TCOD_color_t {
    r: uint8,
    g: uint8,
    b: uint8,
}
pub type Enum_Unnamed2 = c_uint;
pub static TCOD_COLOR_RED: c_uint = 0;
pub static TCOD_COLOR_FLAME: c_uint = 1;
pub static TCOD_COLOR_ORANGE: c_uint = 2;
pub static TCOD_COLOR_AMBER: c_uint = 3;
pub static TCOD_COLOR_YELLOW: c_uint = 4;
pub static TCOD_COLOR_LIME: c_uint = 5;
pub static TCOD_COLOR_CHARTREUSE: c_uint = 6;
pub static TCOD_COLOR_GREEN: c_uint = 7;
pub static TCOD_COLOR_SEA: c_uint = 8;
pub static TCOD_COLOR_TURQUOISE: c_uint = 9;
pub static TCOD_COLOR_CYAN: c_uint = 10;
pub static TCOD_COLOR_SKY: c_uint = 11;
pub static TCOD_COLOR_AZURE: c_uint = 12;
pub static TCOD_COLOR_BLUE: c_uint = 13;
pub static TCOD_COLOR_HAN: c_uint = 14;
pub static TCOD_COLOR_VIOLET: c_uint = 15;
pub static TCOD_COLOR_PURPLE: c_uint = 16;
pub static TCOD_COLOR_FUCHSIA: c_uint = 17;
pub static TCOD_COLOR_MAGENTA: c_uint = 18;
pub static TCOD_COLOR_PINK: c_uint = 19;
pub static TCOD_COLOR_CRIMSON: c_uint = 20;
pub static TCOD_COLOR_NB: c_uint = 21;
pub type Enum_Unnamed3 = c_uint;
pub static TCOD_COLOR_DESATURATED: c_uint = 0;
pub static TCOD_COLOR_LIGHTEST: c_uint = 1;
pub static TCOD_COLOR_LIGHTER: c_uint = 2;
pub static TCOD_COLOR_LIGHT: c_uint = 3;
pub static TCOD_COLOR_NORMAL: c_uint = 4;
pub static TCOD_COLOR_DARK: c_uint = 5;
pub static TCOD_COLOR_DARKER: c_uint = 6;
pub static TCOD_COLOR_DARKEST: c_uint = 7;
pub static TCOD_COLOR_LEVELS: c_uint = 8;
pub type TCOD_keycode_t = c_uint;
pub static TCODK_NONE: c_uint = 0;
pub static TCODK_ESCAPE: c_uint = 1;
pub static TCODK_BACKSPACE: c_uint = 2;
pub static TCODK_TAB: c_uint = 3;
pub static TCODK_ENTER: c_uint = 4;
pub static TCODK_SHIFT: c_uint = 5;
pub static TCODK_CONTROL: c_uint = 6;
pub static TCODK_ALT: c_uint = 7;
pub static TCODK_PAUSE: c_uint = 8;
pub static TCODK_CAPSLOCK: c_uint = 9;
pub static TCODK_PAGEUP: c_uint = 10;
pub static TCODK_PAGEDOWN: c_uint = 11;
pub static TCODK_END: c_uint = 12;
pub static TCODK_HOME: c_uint = 13;
pub static TCODK_UP: c_uint = 14;
pub static TCODK_LEFT: c_uint = 15;
pub static TCODK_RIGHT: c_uint = 16;
pub static TCODK_DOWN: c_uint = 17;
pub static TCODK_PRINTSCREEN: c_uint = 18;
pub static TCODK_INSERT: c_uint = 19;
pub static TCODK_DELETE: c_uint = 20;
pub static TCODK_LWIN: c_uint = 21;
pub static TCODK_RWIN: c_uint = 22;
pub static TCODK_APPS: c_uint = 23;
pub static TCODK_0: c_uint = 24;
pub static TCODK_1: c_uint = 25;
pub static TCODK_2: c_uint = 26;
pub static TCODK_3: c_uint = 27;
pub static TCODK_4: c_uint = 28;
pub static TCODK_5: c_uint = 29;
pub static TCODK_6: c_uint = 30;
pub static TCODK_7: c_uint = 31;
pub static TCODK_8: c_uint = 32;
pub static TCODK_9: c_uint = 33;
pub static TCODK_KP0: c_uint = 34;
pub static TCODK_KP1: c_uint = 35;
pub static TCODK_KP2: c_uint = 36;
pub static TCODK_KP3: c_uint = 37;
pub static TCODK_KP4: c_uint = 38;
pub static TCODK_KP5: c_uint = 39;
pub static TCODK_KP6: c_uint = 40;
pub static TCODK_KP7: c_uint = 41;
pub static TCODK_KP8: c_uint = 42;
pub static TCODK_KP9: c_uint = 43;
pub static TCODK_KPADD: c_uint = 44;
pub static TCODK_KPSUB: c_uint = 45;
pub static TCODK_KPDIV: c_uint = 46;
pub static TCODK_KPMUL: c_uint = 47;
pub static TCODK_KPDEC: c_uint = 48;
pub static TCODK_KPENTER: c_uint = 49;
pub static TCODK_F1: c_uint = 50;
pub static TCODK_F2: c_uint = 51;
pub static TCODK_F3: c_uint = 52;
pub static TCODK_F4: c_uint = 53;
pub static TCODK_F5: c_uint = 54;
pub static TCODK_F6: c_uint = 55;
pub static TCODK_F7: c_uint = 56;
pub static TCODK_F8: c_uint = 57;
pub static TCODK_F9: c_uint = 58;
pub static TCODK_F10: c_uint = 59;
pub static TCODK_F11: c_uint = 60;
pub static TCODK_F12: c_uint = 61;
pub static TCODK_NUMLOCK: c_uint = 62;
pub static TCODK_SCROLLLOCK: c_uint = 63;
pub static TCODK_SPACE: c_uint = 64;
pub static TCODK_CHAR: c_uint = 65;
pub struct TCOD_key_t {
    vk: TCOD_keycode_t,
    c: c_schar,
    pressed: _bool,
    lalt: _bool,
    lctrl: _bool,
    ralt: _bool,
    rctrl: _bool,
    shift: _bool,
}
pub type TCOD_chars_t = c_uint;
pub static TCOD_CHAR_HLINE: c_uint = 196;
pub static TCOD_CHAR_VLINE: c_uint = 179;
pub static TCOD_CHAR_NE: c_uint = 191;
pub static TCOD_CHAR_NW: c_uint = 218;
pub static TCOD_CHAR_SE: c_uint = 217;
pub static TCOD_CHAR_SW: c_uint = 192;
pub static TCOD_CHAR_TEEW: c_uint = 180;
pub static TCOD_CHAR_TEEE: c_uint = 195;
pub static TCOD_CHAR_TEEN: c_uint = 193;
pub static TCOD_CHAR_TEES: c_uint = 194;
pub static TCOD_CHAR_CROSS: c_uint = 197;
pub static TCOD_CHAR_DHLINE: c_uint = 205;
pub static TCOD_CHAR_DVLINE: c_uint = 186;
pub static TCOD_CHAR_DNE: c_uint = 187;
pub static TCOD_CHAR_DNW: c_uint = 201;
pub static TCOD_CHAR_DSE: c_uint = 188;
pub static TCOD_CHAR_DSW: c_uint = 200;
pub static TCOD_CHAR_DTEEW: c_uint = 185;
pub static TCOD_CHAR_DTEEE: c_uint = 204;
pub static TCOD_CHAR_DTEEN: c_uint = 202;
pub static TCOD_CHAR_DTEES: c_uint = 203;
pub static TCOD_CHAR_DCROSS: c_uint = 206;
pub static TCOD_CHAR_BLOCK1: c_uint = 176;
pub static TCOD_CHAR_BLOCK2: c_uint = 177;
pub static TCOD_CHAR_BLOCK3: c_uint = 178;
pub static TCOD_CHAR_ARROW_N: c_uint = 24;
pub static TCOD_CHAR_ARROW_S: c_uint = 25;
pub static TCOD_CHAR_ARROW_E: c_uint = 26;
pub static TCOD_CHAR_ARROW_W: c_uint = 27;
pub static TCOD_CHAR_ARROW2_N: c_uint = 30;
pub static TCOD_CHAR_ARROW2_S: c_uint = 31;
pub static TCOD_CHAR_ARROW2_E: c_uint = 16;
pub static TCOD_CHAR_ARROW2_W: c_uint = 17;
pub static TCOD_CHAR_DARROW_H: c_uint = 29;
pub static TCOD_CHAR_DARROW_V: c_uint = 18;
pub static TCOD_CHAR_CHECKBOX_UNSET: c_uint = 224;
pub static TCOD_CHAR_CHECKBOX_SET: c_uint = 225;
pub static TCOD_CHAR_RADIO_UNSET: c_uint = 9;
pub static TCOD_CHAR_RADIO_SET: c_uint = 10;
pub static TCOD_CHAR_SUBP_NW: c_uint = 226;
pub static TCOD_CHAR_SUBP_NE: c_uint = 227;
pub static TCOD_CHAR_SUBP_N: c_uint = 228;
pub static TCOD_CHAR_SUBP_SE: c_uint = 229;
pub static TCOD_CHAR_SUBP_DIAG: c_uint = 230;
pub static TCOD_CHAR_SUBP_E: c_uint = 231;
pub static TCOD_CHAR_SUBP_SW: c_uint = 232;
pub static TCOD_CHAR_SMILIE: c_uint = 1;
pub static TCOD_CHAR_SMILIE_INV: c_uint = 2;
pub static TCOD_CHAR_HEART: c_uint = 3;
pub static TCOD_CHAR_DIAMOND: c_uint = 4;
pub static TCOD_CHAR_CLUB: c_uint = 5;
pub static TCOD_CHAR_SPADE: c_uint = 6;
pub static TCOD_CHAR_BULLET: c_uint = 7;
pub static TCOD_CHAR_BULLET_INV: c_uint = 8;
pub static TCOD_CHAR_MALE: c_uint = 11;
pub static TCOD_CHAR_FEMALE: c_uint = 12;
pub static TCOD_CHAR_NOTE: c_uint = 13;
pub static TCOD_CHAR_NOTE_DOUBLE: c_uint = 14;
pub static TCOD_CHAR_LIGHT: c_uint = 15;
pub static TCOD_CHAR_EXCLAM_DOUBLE: c_uint = 19;
pub static TCOD_CHAR_PILCROW: c_uint = 20;
pub static TCOD_CHAR_SECTION: c_uint = 21;
pub static TCOD_CHAR_POUND: c_uint = 156;
pub static TCOD_CHAR_MULTIPLICATION: c_uint = 158;
pub static TCOD_CHAR_FUNCTION: c_uint = 159;
pub static TCOD_CHAR_RESERVED: c_uint = 169;
pub static TCOD_CHAR_HALF: c_uint = 171;
pub static TCOD_CHAR_ONE_QUARTER: c_uint = 172;
pub static TCOD_CHAR_COPYRIGHT: c_uint = 184;
pub static TCOD_CHAR_CENT: c_uint = 189;
pub static TCOD_CHAR_YEN: c_uint = 190;
pub static TCOD_CHAR_CURRENCY: c_uint = 207;
pub static TCOD_CHAR_THREE_QUARTERS: c_uint = 243;
pub static TCOD_CHAR_DIVISION: c_uint = 246;
pub static TCOD_CHAR_GRADE: c_uint = 248;
pub static TCOD_CHAR_UMLAUT: c_uint = 249;
pub static TCOD_CHAR_POW1: c_uint = 251;
pub static TCOD_CHAR_POW3: c_uint = 252;
pub static TCOD_CHAR_POW2: c_uint = 253;
pub static TCOD_CHAR_BULLET_SQUARE: c_uint = 254;
pub type TCOD_colctrl_t = c_uint;
pub static TCOD_COLCTRL_1: c_uint = 1;
pub static TCOD_COLCTRL_2: c_uint = 2;
pub static TCOD_COLCTRL_3: c_uint = 3;
pub static TCOD_COLCTRL_4: c_uint = 4;
pub static TCOD_COLCTRL_5: c_uint = 5;
pub static TCOD_COLCTRL_NUMBER: c_uint = 5;
pub static TCOD_COLCTRL_FORE_RGB: c_uint = 6;
pub static TCOD_COLCTRL_BACK_RGB: c_uint = 7;
pub static TCOD_COLCTRL_STOP: c_uint = 8;
pub type TCOD_bkgnd_flag_t = c_uint;
pub static TCOD_BKGND_NONE: c_uint = 0;
pub static TCOD_BKGND_SET: c_uint = 1;
pub static TCOD_BKGND_MULTIPLY: c_uint = 2;
pub static TCOD_BKGND_LIGHTEN: c_uint = 3;
pub static TCOD_BKGND_DARKEN: c_uint = 4;
pub static TCOD_BKGND_SCREEN: c_uint = 5;
pub static TCOD_BKGND_COLOR_DODGE: c_uint = 6;
pub static TCOD_BKGND_COLOR_BURN: c_uint = 7;
pub static TCOD_BKGND_ADD: c_uint = 8;
pub static TCOD_BKGND_ADDA: c_uint = 9;
pub static TCOD_BKGND_BURN: c_uint = 10;
pub static TCOD_BKGND_OVERLAY: c_uint = 11;
pub static TCOD_BKGND_ALPH: c_uint = 12;
pub static TCOD_BKGND_DEFAULT: c_uint = 13;
pub type TCOD_key_status_t = c_uint;
pub static TCOD_KEY_PRESSED: c_uint = 1;
pub static TCOD_KEY_RELEASED: c_uint = 2;
pub type TCOD_font_flags_t = c_uint;
pub static TCOD_FONT_LAYOUT_ASCII_INCOL: c_uint = 1;
pub static TCOD_FONT_LAYOUT_ASCII_INROW: c_uint = 2;
pub static TCOD_FONT_TYPE_GREYSCALE: c_uint = 4;
pub static TCOD_FONT_TYPE_GRAYSCALE: c_uint = 4;
pub static TCOD_FONT_LAYOUT_TCOD: c_uint = 8;
pub type TCOD_renderer_t = c_uint;
pub static TCOD_RENDERER_GLSL: c_uint = 0;
pub static TCOD_RENDERER_OPENGL: c_uint = 1;
pub static TCOD_RENDERER_SDL: c_uint = 2;
pub static TCOD_NB_RENDERERS: c_uint = 3;
pub type TCOD_alignment_t = c_uint;
pub static TCOD_LEFT: c_uint = 0;
pub static TCOD_RIGHT: c_uint = 1;
pub static TCOD_CENTER: c_uint = 2;
pub type TCOD_console_t = *mut c_void;
pub type TCOD_image_t = *mut c_void;
pub struct TCOD_mouse_t {
    x: c_int,
    y: c_int,
    dx: c_int,
    dy: c_int,
    cx: c_int,
    cy: c_int,
    dcx: c_int,
    dcy: c_int,
    lbutton: _bool,
    rbutton: _bool,
    mbutton: _bool,
    lbutton_pressed: _bool,
    rbutton_pressed: _bool,
    mbutton_pressed: _bool,
    wheel_up: _bool,
    wheel_down: _bool,
}
pub type TCOD_event_t = c_uint;
pub static TCOD_EVENT_KEY_PRESS: c_uint = 1;
pub static TCOD_EVENT_KEY_RELEASE: c_uint = 2;
pub static TCOD_EVENT_KEY: c_uint = 3;
pub static TCOD_EVENT_MOUSE_MOVE: c_uint = 4;
pub static TCOD_EVENT_MOUSE_PRESS: c_uint = 8;
pub static TCOD_EVENT_MOUSE_RELEASE: c_uint = 16;
pub static TCOD_EVENT_MOUSE: c_uint = 28;
pub static TCOD_EVENT_ANY: c_uint = 31;
pub type TCOD_thread_t = *mut c_void;
pub type TCOD_semaphore_t = *mut c_void;
pub type TCOD_mutex_t = *mut c_void;
pub type TCOD_cond_t = *mut c_void;
pub type TCOD_library_t = *mut c_void;
pub type SDL_renderer_t =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void)>;
pub struct TCOD_dice_t {
    nb_rolls: c_int,
    nb_faces: c_int,
    multiplier: c_float,
    addsub: c_float,
}
pub type TCOD_random_algo_t = c_uint;
pub static TCOD_RNG_MT: c_uint = 0;
pub static TCOD_RNG_CMWC: c_uint = 1;
pub type TCOD_distribution_t = c_uint;
pub static TCOD_DISTRIBUTION_LINEAR: c_uint = 0;
pub static TCOD_DISTRIBUTION_GAUSSIAN: c_uint = 1;
pub static TCOD_DISTRIBUTION_GAUSSIAN_RANGE: c_uint = 2;
pub static TCOD_DISTRIBUTION_GAUSSIAN_INVERSE: c_uint = 3;
pub static TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE: c_uint = 4;
pub type TCOD_random_t = *mut c_void;
pub type TCOD_line_listener_t =
    ::std::option::Option<extern "C" fn(arg1: c_int, arg2: c_int) -> _bool>;
pub struct TCOD_bresenham_data_t {
    stepx: c_int,
    stepy: c_int,
    e: c_int,
    deltax: c_int,
    deltay: c_int,
    origx: c_int,
    origy: c_int,
    destx: c_int,
    desty: c_int,
}
pub type TCOD_noise_t = *mut c_void;
pub type TCOD_noise_type_t = c_uint;
pub static TCOD_NOISE_PERLIN: c_uint = 1;
pub static TCOD_NOISE_SIMPLEX: c_uint = 2;
pub static TCOD_NOISE_WAVELET: c_uint = 4;
pub static TCOD_NOISE_DEFAULT: c_uint = 0;
pub type TCOD_map_t = *mut c_void;
pub type TCOD_fov_algorithm_t = c_uint;
pub static FOV_BASIC: c_uint = 0;
pub static FOV_DIAMOND: c_uint = 1;
pub static FOV_SHADOW: c_uint = 2;
pub static FOV_PERMISSIVE_0: c_uint = 3;
pub static FOV_PERMISSIVE_1: c_uint = 4;
pub static FOV_PERMISSIVE_2: c_uint = 5;
pub static FOV_PERMISSIVE_3: c_uint = 6;
pub static FOV_PERMISSIVE_4: c_uint = 7;
pub static FOV_PERMISSIVE_5: c_uint = 8;
pub static FOV_PERMISSIVE_6: c_uint = 9;
pub static FOV_PERMISSIVE_7: c_uint = 10;
pub static FOV_PERMISSIVE_8: c_uint = 11;
pub static FOV_RESTRICTIVE: c_uint = 12;
pub static NB_FOV_ALGORITHMS: c_uint = 13;
pub type TCOD_path_func_t =
    ::std::option::Option<extern "C" fn
                              (arg1: c_int, arg2: c_int, arg3: c_int,
                               arg4: c_int, arg5: *mut c_void) -> c_float>;
pub type TCOD_path_t = *mut c_void;
pub type TCOD_dijkstra_t = *mut c_void;
pub struct TCOD_lex_t {
    file_line: c_int,
    token_type: c_int,
    token_int_val: c_int,
    token_idx: c_int,
    token_float_val: c_float,
    tok: *mut c_schar,
    toklen: c_int,
    lastStringDelim: c_schar,
    pos: *mut c_schar,
    buf: *mut c_schar,
    filename: *mut c_schar,
    last_javadoc_comment: *mut c_schar,
    nb_symbols: c_int,
    nb_keywords: c_int,
    flags: c_int,
    symbols: [[c_schar, ..5u], ..100u],
    keywords: [[c_schar, ..20u], ..100u],
    simpleCmt: *c_schar,
    cmtStart: *c_schar,
    cmtStop: *c_schar,
    javadocCmtStart: *c_schar,
    stringDelim: *c_schar,
    javadoc_read: _bool,
    allocBuf: _bool,
    savept: _bool,
}
pub type TCOD_value_type_t = c_uint;
pub static TCOD_TYPE_NONE: c_uint = 0;
pub static TCOD_TYPE_BOOL: c_uint = 1;
pub static TCOD_TYPE_CHAR: c_uint = 2;
pub static TCOD_TYPE_INT: c_uint = 3;
pub static TCOD_TYPE_FLOAT: c_uint = 4;
pub static TCOD_TYPE_STRING: c_uint = 5;
pub static TCOD_TYPE_COLOR: c_uint = 6;
pub static TCOD_TYPE_DICE: c_uint = 7;
pub static TCOD_TYPE_VALUELIST00: c_uint = 8;
pub static TCOD_TYPE_VALUELIST01: c_uint = 9;
pub static TCOD_TYPE_VALUELIST02: c_uint = 10;
pub static TCOD_TYPE_VALUELIST03: c_uint = 11;
pub static TCOD_TYPE_VALUELIST04: c_uint = 12;
pub static TCOD_TYPE_VALUELIST05: c_uint = 13;
pub static TCOD_TYPE_VALUELIST06: c_uint = 14;
pub static TCOD_TYPE_VALUELIST07: c_uint = 15;
pub static TCOD_TYPE_VALUELIST08: c_uint = 16;
pub static TCOD_TYPE_VALUELIST09: c_uint = 17;
pub static TCOD_TYPE_VALUELIST10: c_uint = 18;
pub static TCOD_TYPE_VALUELIST11: c_uint = 19;
pub static TCOD_TYPE_VALUELIST12: c_uint = 20;
pub static TCOD_TYPE_VALUELIST13: c_uint = 21;
pub static TCOD_TYPE_VALUELIST14: c_uint = 22;
pub static TCOD_TYPE_VALUELIST15: c_uint = 23;
pub static TCOD_TYPE_CUSTOM00: c_uint = 24;
pub static TCOD_TYPE_CUSTOM01: c_uint = 25;
pub static TCOD_TYPE_CUSTOM02: c_uint = 26;
pub static TCOD_TYPE_CUSTOM03: c_uint = 27;
pub static TCOD_TYPE_CUSTOM04: c_uint = 28;
pub static TCOD_TYPE_CUSTOM05: c_uint = 29;
pub static TCOD_TYPE_CUSTOM06: c_uint = 30;
pub static TCOD_TYPE_CUSTOM07: c_uint = 31;
pub static TCOD_TYPE_CUSTOM08: c_uint = 32;
pub static TCOD_TYPE_CUSTOM09: c_uint = 33;
pub static TCOD_TYPE_CUSTOM10: c_uint = 34;
pub static TCOD_TYPE_CUSTOM11: c_uint = 35;
pub static TCOD_TYPE_CUSTOM12: c_uint = 36;
pub static TCOD_TYPE_CUSTOM13: c_uint = 37;
pub static TCOD_TYPE_CUSTOM14: c_uint = 38;
pub static TCOD_TYPE_CUSTOM15: c_uint = 39;
pub static TCOD_TYPE_LIST: c_uint = 1024;
pub struct TCOD_value_t {
    data: [u64, ..2u],
}
impl TCOD_value_t {
    pub fn b(&mut self) -> *mut _bool {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn c(&mut self) -> *mut c_schar {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn i(&mut self) -> *mut int32 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn f(&mut self) -> *mut c_float {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn s(&mut self) -> *mut *mut c_schar {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn col(&mut self) -> *mut TCOD_color_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn dice(&mut self) -> *mut TCOD_dice_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn list(&mut self) -> *mut TCOD_list_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn custom(&mut self) -> *mut *mut c_void {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type TCOD_parser_struct_t = *mut c_void;
pub struct TCOD_parser_listener_t {
    new_struct: ::std::option::Option<extern "C" fn
                                          (arg1: TCOD_parser_struct_t,
                                           arg2: *c_schar) -> _bool>,
    new_flag: ::std::option::Option<extern "C" fn(arg1: *c_schar) -> _bool>,
    new_property: ::std::option::Option<extern "C" fn
                                            (arg1: *c_schar,
                                             arg2: TCOD_value_type_t,
                                             arg3: TCOD_value_t) -> _bool>,
    end_struct: ::std::option::Option<extern "C" fn
                                          (arg1: TCOD_parser_struct_t,
                                           arg2: *c_schar) -> _bool>,
    error: ::std::option::Option<extern "C" fn(arg1: *c_schar)>,
}
pub type TCOD_parser_custom_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut TCOD_lex_t,
                               arg2: *mut TCOD_parser_listener_t,
                               arg3: TCOD_parser_struct_t, arg4: *mut c_schar)
                              -> TCOD_value_t>;
pub type TCOD_parser_t = *mut c_void;
pub struct TCOD_struct_int_t {
    name: *mut c_schar,
    flags: TCOD_list_t,
    props: TCOD_list_t,
    lists: TCOD_list_t,
    structs: TCOD_list_t,
}
pub struct TCOD_parser_int_t {
    structs: TCOD_list_t,
    customs: [TCOD_parser_custom_t, ..16u],
    fatal: _bool,
    props: TCOD_list_t,
}
pub struct Struct__TCOD_tree_t {
    next: *mut Struct__TCOD_tree_t,
    father: *mut Struct__TCOD_tree_t,
    sons: *mut Struct__TCOD_tree_t,
}
pub type TCOD_tree_t = Struct__TCOD_tree_t;
pub struct TCOD_bsp_t {
    tree: TCOD_tree_t,
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int,
    position: c_int,
    level: uint8,
    horizontal: _bool,
}
pub type TCOD_bsp_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut TCOD_bsp_t, arg2: *mut c_void)
                              -> _bool>;
pub struct TCOD_heightmap_t {
    w: c_int,
    h: c_int,
    values: *mut c_float,
}
pub type TCOD_zip_t = *mut c_void;
pub type TCOD_namegen_t = *mut c_void;
pub type TCOD_text_t = *mut c_void;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: *mut c_void,
    reg_save_area: *mut c_void,
}
#[link(name = "tcod")]
extern "C" {
    pub static mut TCOD_colors: [[TCOD_color_t, ..8u], ..21u];
    pub static TCOD_black: TCOD_color_t;
    pub static TCOD_darkest_grey: TCOD_color_t;
    pub static TCOD_darker_grey: TCOD_color_t;
    pub static TCOD_dark_grey: TCOD_color_t;
    pub static TCOD_grey: TCOD_color_t;
    pub static TCOD_light_grey: TCOD_color_t;
    pub static TCOD_lighter_grey: TCOD_color_t;
    pub static TCOD_lightest_grey: TCOD_color_t;
    pub static TCOD_darkest_gray: TCOD_color_t;
    pub static TCOD_darker_gray: TCOD_color_t;
    pub static TCOD_dark_gray: TCOD_color_t;
    pub static TCOD_gray: TCOD_color_t;
    pub static TCOD_light_gray: TCOD_color_t;
    pub static TCOD_lighter_gray: TCOD_color_t;
    pub static TCOD_lightest_gray: TCOD_color_t;
    pub static TCOD_white: TCOD_color_t;
    pub static TCOD_darkest_sepia: TCOD_color_t;
    pub static TCOD_darker_sepia: TCOD_color_t;
    pub static TCOD_dark_sepia: TCOD_color_t;
    pub static TCOD_sepia: TCOD_color_t;
    pub static TCOD_light_sepia: TCOD_color_t;
    pub static TCOD_lighter_sepia: TCOD_color_t;
    pub static TCOD_lightest_sepia: TCOD_color_t;
    pub static TCOD_red: TCOD_color_t;
    pub static TCOD_flame: TCOD_color_t;
    pub static TCOD_orange: TCOD_color_t;
    pub static TCOD_amber: TCOD_color_t;
    pub static TCOD_yellow: TCOD_color_t;
    pub static TCOD_lime: TCOD_color_t;
    pub static TCOD_chartreuse: TCOD_color_t;
    pub static TCOD_green: TCOD_color_t;
    pub static TCOD_sea: TCOD_color_t;
    pub static TCOD_turquoise: TCOD_color_t;
    pub static TCOD_cyan: TCOD_color_t;
    pub static TCOD_sky: TCOD_color_t;
    pub static TCOD_azure: TCOD_color_t;
    pub static TCOD_blue: TCOD_color_t;
    pub static TCOD_han: TCOD_color_t;
    pub static TCOD_violet: TCOD_color_t;
    pub static TCOD_purple: TCOD_color_t;
    pub static TCOD_fuchsia: TCOD_color_t;
    pub static TCOD_magenta: TCOD_color_t;
    pub static TCOD_pink: TCOD_color_t;
    pub static TCOD_crimson: TCOD_color_t;
    pub static TCOD_dark_red: TCOD_color_t;
    pub static TCOD_dark_flame: TCOD_color_t;
    pub static TCOD_dark_orange: TCOD_color_t;
    pub static TCOD_dark_amber: TCOD_color_t;
    pub static TCOD_dark_yellow: TCOD_color_t;
    pub static TCOD_dark_lime: TCOD_color_t;
    pub static TCOD_dark_chartreuse: TCOD_color_t;
    pub static TCOD_dark_green: TCOD_color_t;
    pub static TCOD_dark_sea: TCOD_color_t;
    pub static TCOD_dark_turquoise: TCOD_color_t;
    pub static TCOD_dark_cyan: TCOD_color_t;
    pub static TCOD_dark_sky: TCOD_color_t;
    pub static TCOD_dark_azure: TCOD_color_t;
    pub static TCOD_dark_blue: TCOD_color_t;
    pub static TCOD_dark_han: TCOD_color_t;
    pub static TCOD_dark_violet: TCOD_color_t;
    pub static TCOD_dark_purple: TCOD_color_t;
    pub static TCOD_dark_fuchsia: TCOD_color_t;
    pub static TCOD_dark_magenta: TCOD_color_t;
    pub static TCOD_dark_pink: TCOD_color_t;
    pub static TCOD_dark_crimson: TCOD_color_t;
    pub static TCOD_darker_red: TCOD_color_t;
    pub static TCOD_darker_flame: TCOD_color_t;
    pub static TCOD_darker_orange: TCOD_color_t;
    pub static TCOD_darker_amber: TCOD_color_t;
    pub static TCOD_darker_yellow: TCOD_color_t;
    pub static TCOD_darker_lime: TCOD_color_t;
    pub static TCOD_darker_chartreuse: TCOD_color_t;
    pub static TCOD_darker_green: TCOD_color_t;
    pub static TCOD_darker_sea: TCOD_color_t;
    pub static TCOD_darker_turquoise: TCOD_color_t;
    pub static TCOD_darker_cyan: TCOD_color_t;
    pub static TCOD_darker_sky: TCOD_color_t;
    pub static TCOD_darker_azure: TCOD_color_t;
    pub static TCOD_darker_blue: TCOD_color_t;
    pub static TCOD_darker_han: TCOD_color_t;
    pub static TCOD_darker_violet: TCOD_color_t;
    pub static TCOD_darker_purple: TCOD_color_t;
    pub static TCOD_darker_fuchsia: TCOD_color_t;
    pub static TCOD_darker_magenta: TCOD_color_t;
    pub static TCOD_darker_pink: TCOD_color_t;
    pub static TCOD_darker_crimson: TCOD_color_t;
    pub static TCOD_darkest_red: TCOD_color_t;
    pub static TCOD_darkest_flame: TCOD_color_t;
    pub static TCOD_darkest_orange: TCOD_color_t;
    pub static TCOD_darkest_amber: TCOD_color_t;
    pub static TCOD_darkest_yellow: TCOD_color_t;
    pub static TCOD_darkest_lime: TCOD_color_t;
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
    pub static TCOD_darkest_green: TCOD_color_t;
    pub static TCOD_darkest_sea: TCOD_color_t;
    pub static TCOD_darkest_turquoise: TCOD_color_t;
    pub static TCOD_darkest_cyan: TCOD_color_t;
    pub static TCOD_darkest_sky: TCOD_color_t;
    pub static TCOD_darkest_azure: TCOD_color_t;
    pub static TCOD_darkest_blue: TCOD_color_t;
    pub static TCOD_darkest_han: TCOD_color_t;
    pub static TCOD_darkest_violet: TCOD_color_t;
    pub static TCOD_darkest_purple: TCOD_color_t;
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
    pub static TCOD_darkest_magenta: TCOD_color_t;
    pub static TCOD_darkest_pink: TCOD_color_t;
    pub static TCOD_darkest_crimson: TCOD_color_t;
    pub static TCOD_light_red: TCOD_color_t;
    pub static TCOD_light_flame: TCOD_color_t;
    pub static TCOD_light_orange: TCOD_color_t;
    pub static TCOD_light_amber: TCOD_color_t;
    pub static TCOD_light_yellow: TCOD_color_t;
    pub static TCOD_light_lime: TCOD_color_t;
    pub static TCOD_light_chartreuse: TCOD_color_t;
    pub static TCOD_light_green: TCOD_color_t;
    pub static TCOD_light_sea: TCOD_color_t;
    pub static TCOD_light_turquoise: TCOD_color_t;
    pub static TCOD_light_cyan: TCOD_color_t;
    pub static TCOD_light_sky: TCOD_color_t;
    pub static TCOD_light_azure: TCOD_color_t;
    pub static TCOD_light_blue: TCOD_color_t;
    pub static TCOD_light_han: TCOD_color_t;
    pub static TCOD_light_violet: TCOD_color_t;
    pub static TCOD_light_purple: TCOD_color_t;
    pub static TCOD_light_fuchsia: TCOD_color_t;
    pub static TCOD_light_magenta: TCOD_color_t;
    pub static TCOD_light_pink: TCOD_color_t;
    pub static TCOD_light_crimson: TCOD_color_t;
    pub static TCOD_lighter_red: TCOD_color_t;
    pub static TCOD_lighter_flame: TCOD_color_t;
    pub static TCOD_lighter_orange: TCOD_color_t;
    pub static TCOD_lighter_amber: TCOD_color_t;
    pub static TCOD_lighter_yellow: TCOD_color_t;
    pub static TCOD_lighter_lime: TCOD_color_t;
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
    pub static TCOD_lighter_green: TCOD_color_t;
    pub static TCOD_lighter_sea: TCOD_color_t;
    pub static TCOD_lighter_turquoise: TCOD_color_t;
    pub static TCOD_lighter_cyan: TCOD_color_t;
    pub static TCOD_lighter_sky: TCOD_color_t;
    pub static TCOD_lighter_azure: TCOD_color_t;
    pub static TCOD_lighter_blue: TCOD_color_t;
    pub static TCOD_lighter_han: TCOD_color_t;
    pub static TCOD_lighter_violet: TCOD_color_t;
    pub static TCOD_lighter_purple: TCOD_color_t;
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
    pub static TCOD_lighter_magenta: TCOD_color_t;
    pub static TCOD_lighter_pink: TCOD_color_t;
    pub static TCOD_lighter_crimson: TCOD_color_t;
    pub static TCOD_lightest_red: TCOD_color_t;
    pub static TCOD_lightest_flame: TCOD_color_t;
    pub static TCOD_lightest_orange: TCOD_color_t;
    pub static TCOD_lightest_amber: TCOD_color_t;
    pub static TCOD_lightest_yellow: TCOD_color_t;
    pub static TCOD_lightest_lime: TCOD_color_t;
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
    pub static TCOD_lightest_green: TCOD_color_t;
    pub static TCOD_lightest_sea: TCOD_color_t;
    pub static TCOD_lightest_turquoise: TCOD_color_t;
    pub static TCOD_lightest_cyan: TCOD_color_t;
    pub static TCOD_lightest_sky: TCOD_color_t;
    pub static TCOD_lightest_azure: TCOD_color_t;
    pub static TCOD_lightest_blue: TCOD_color_t;
    pub static TCOD_lightest_han: TCOD_color_t;
    pub static TCOD_lightest_violet: TCOD_color_t;
    pub static TCOD_lightest_purple: TCOD_color_t;
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
    pub static TCOD_lightest_magenta: TCOD_color_t;
    pub static TCOD_lightest_pink: TCOD_color_t;
    pub static TCOD_lightest_crimson: TCOD_color_t;
    pub static TCOD_desaturated_red: TCOD_color_t;
    pub static TCOD_desaturated_flame: TCOD_color_t;
    pub static TCOD_desaturated_orange: TCOD_color_t;
    pub static TCOD_desaturated_amber: TCOD_color_t;
    pub static TCOD_desaturated_yellow: TCOD_color_t;
    pub static TCOD_desaturated_lime: TCOD_color_t;
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
    pub static TCOD_desaturated_green: TCOD_color_t;
    pub static TCOD_desaturated_sea: TCOD_color_t;
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
    pub static TCOD_desaturated_cyan: TCOD_color_t;
    pub static TCOD_desaturated_sky: TCOD_color_t;
    pub static TCOD_desaturated_azure: TCOD_color_t;
    pub static TCOD_desaturated_blue: TCOD_color_t;
    pub static TCOD_desaturated_han: TCOD_color_t;
    pub static TCOD_desaturated_violet: TCOD_color_t;
    pub static TCOD_desaturated_purple: TCOD_color_t;
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
    pub static TCOD_desaturated_magenta: TCOD_color_t;
    pub static TCOD_desaturated_pink: TCOD_color_t;
    pub static TCOD_desaturated_crimson: TCOD_color_t;
    pub static TCOD_brass: TCOD_color_t;
    pub static TCOD_copper: TCOD_color_t;
    pub static TCOD_gold: TCOD_color_t;
    pub static TCOD_silver: TCOD_color_t;
    pub static TCOD_celadon: TCOD_color_t;
    pub static TCOD_peach: TCOD_color_t;
    pub fn wcscpy(__dest: *mut wchar_t, __src: *wchar_t) -> *mut wchar_t;
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn wcscat(__dest: *mut wchar_t, __src: *wchar_t) -> *mut wchar_t;
    pub fn wcsncat(__dest: *mut wchar_t, __src: *wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn wcscmp(__s1: *wchar_t, __s2: *wchar_t) -> c_int;
    pub fn wcsncmp(__s1: *wchar_t, __s2: *wchar_t, __n: size_t) -> c_int;
    pub fn wcscasecmp(__s1: *wchar_t, __s2: *wchar_t) -> c_int;
    pub fn wcsncasecmp(__s1: *wchar_t, __s2: *wchar_t, __n: size_t) -> c_int;
    pub fn wcscasecmp_l(__s1: *wchar_t, __s2: *wchar_t, __loc: __locale_t) ->
     c_int;
    pub fn wcsncasecmp_l(__s1: *wchar_t, __s2: *wchar_t, __n: size_t,
                         __loc: __locale_t) -> c_int;
    pub fn wcscoll(__s1: *wchar_t, __s2: *wchar_t) -> c_int;
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *wchar_t, __n: size_t) -> size_t;
    pub fn wcscoll_l(__s1: *wchar_t, __s2: *wchar_t, __loc: __locale_t) ->
     c_int;
    pub fn wcsxfrm_l(__s1: *mut wchar_t, __s2: *wchar_t, __n: size_t,
                     __loc: __locale_t) -> size_t;
    pub fn wcsdup(__s: *wchar_t) -> *mut wchar_t;
    pub fn wcschr(__wcs: *wchar_t, __wc: wchar_t) -> *mut wchar_t;
    pub fn wcsrchr(__wcs: *wchar_t, __wc: wchar_t) -> *mut wchar_t;
    pub fn wcscspn(__wcs: *wchar_t, __reject: *wchar_t) -> size_t;
    pub fn wcsspn(__wcs: *wchar_t, __accept: *wchar_t) -> size_t;
    pub fn wcspbrk(__wcs: *wchar_t, __accept: *wchar_t) -> *mut wchar_t;
    pub fn wcsstr(__haystack: *wchar_t, __needle: *wchar_t) -> *mut wchar_t;
    pub fn wcstok(__s: *mut wchar_t, __delim: *wchar_t,
                  __ptr: *mut *mut wchar_t) -> *mut wchar_t;
    pub fn wcslen(__s: *wchar_t) -> size_t;
    pub fn wcsnlen(__s: *wchar_t, __maxlen: size_t) -> size_t;
    pub fn wmemchr(__s: *wchar_t, __c: wchar_t, __n: size_t) -> *mut wchar_t;
    pub fn wmemcmp(__s1: *wchar_t, __s2: *wchar_t, __n: size_t) -> c_int;
    pub fn wmemcpy(__s1: *mut wchar_t, __s2: *wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn wmemmove(__s1: *mut wchar_t, __s2: *wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn btowc(__c: c_int) -> wint_t;
    pub fn wctob(__c: wint_t) -> c_int;
    pub fn mbsinit(__ps: *mbstate_t) -> c_int;
    pub fn mbrtowc(__pwc: *mut wchar_t, __s: *c_schar, __n: size_t,
                   __p: *mut mbstate_t) -> size_t;
    pub fn wcrtomb(__s: *mut c_schar, __wc: wchar_t, __ps: *mut mbstate_t) ->
     size_t;
    pub fn __mbrlen(__s: *c_schar, __n: size_t, __ps: *mut mbstate_t) ->
     size_t;
    pub fn mbrlen(__s: *c_schar, __n: size_t, __ps: *mut mbstate_t) -> size_t;
    pub fn mbsrtowcs(__dst: *mut wchar_t, __src: *mut *c_schar, __len: size_t,
                     __ps: *mut mbstate_t) -> size_t;
    pub fn wcsrtombs(__dst: *mut c_schar, __src: *mut *wchar_t, __len: size_t,
                     __ps: *mut mbstate_t) -> size_t;
    pub fn mbsnrtowcs(__dst: *mut wchar_t, __src: *mut *c_schar,
                      __nmc: size_t, __len: size_t, __ps: *mut mbstate_t) ->
     size_t;
    pub fn wcsnrtombs(__dst: *mut c_schar, __src: *mut *wchar_t,
                      __nwc: size_t, __len: size_t, __ps: *mut mbstate_t) ->
     size_t;
    pub fn wcstod(__nptr: *wchar_t, __endptr: *mut *mut wchar_t) -> c_double;
    pub fn wcstof(__nptr: *wchar_t, __endptr: *mut *mut wchar_t) -> c_float;
    pub fn wcstold(__nptr: *wchar_t, __endptr: *mut *mut wchar_t) -> c_double;
    pub fn wcstol(__nptr: *wchar_t, __endptr: *mut *mut wchar_t,
                  __base: c_int) -> c_long;
    pub fn wcstoul(__nptr: *wchar_t, __endptr: *mut *mut wchar_t,
                   __base: c_int) -> c_ulong;
    pub fn wcstoll(__nptr: *wchar_t, __endptr: *mut *mut wchar_t,
                   __base: c_int) -> c_longlong;
    pub fn wcstoull(__nptr: *wchar_t, __endptr: *mut *mut wchar_t,
                    __base: c_int) -> c_ulonglong;
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *wchar_t) -> *mut wchar_t;
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *wchar_t, __n: size_t) ->
     *mut wchar_t;
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t,
                           __sizeloc: *mut size_t) -> *mut __FILE;
    pub fn fwide(__fp: *mut __FILE, __mode: c_int) -> c_int;
    pub fn fwprintf(__stream: *mut __FILE, __format: *wchar_t, ...) -> c_int;
    pub fn wprintf(__format: *wchar_t, ...) -> c_int;
    pub fn swprintf(__s: *mut wchar_t, __n: size_t, __format: *wchar_t, ...)
     -> c_int;
    pub fn vfwprintf(__s: *mut __FILE, __format: *wchar_t,
                     __arg: __gnuc_va_list) -> c_int;
    pub fn vwprintf(__format: *wchar_t, __arg: __gnuc_va_list) -> c_int;
    pub fn vswprintf(__s: *mut wchar_t, __n: size_t, __format: *wchar_t,
                     __arg: __gnuc_va_list) -> c_int;
    pub fn fwscanf(__stream: *mut __FILE, __format: *wchar_t, ...) -> c_int;
    pub fn wscanf(__format: *wchar_t, ...) -> c_int;
    pub fn swscanf(__s: *wchar_t, __format: *wchar_t, ...) -> c_int;
    pub fn vfwscanf(__s: *mut __FILE, __format: *wchar_t,
                    __arg: __gnuc_va_list) -> c_int;
    pub fn vwscanf(__format: *wchar_t, __arg: __gnuc_va_list) -> c_int;
    pub fn vswscanf(__s: *wchar_t, __format: *wchar_t, __arg: __gnuc_va_list)
     -> c_int;
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
    pub fn getwchar() -> wint_t;
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
    pub fn putwchar(__wc: wchar_t) -> wint_t;
    pub fn fgetws(__ws: *mut wchar_t, __n: c_int, __stream: *mut __FILE) ->
     *mut wchar_t;
    pub fn fputws(__ws: *wchar_t, __stream: *mut __FILE) -> c_int;
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
    pub fn wcsftime(__s: *mut wchar_t, __maxsize: size_t, __format: *wchar_t,
                    __tp: *Struct_tm) -> size_t;
    pub fn TCOD_strdup(s: *c_schar) -> *mut c_schar;
    pub fn TCOD_strcasecmp(s1: *c_schar, s2: *c_schar) -> c_int;
    pub fn TCOD_strncasecmp(s1: *c_schar, s2: *c_schar, n: size_t) -> c_int;
    pub fn TCOD_list_new() -> TCOD_list_t;
    pub fn TCOD_list_allocate(nb_elements: c_int) -> TCOD_list_t;
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
    pub fn TCOD_list_delete(l: TCOD_list_t);
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *c_void);
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut c_void;
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut c_void;
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
    pub fn TCOD_list_get(l: TCOD_list_t, idx: c_int) -> *mut c_void;
    pub fn TCOD_list_set(l: TCOD_list_t, elt: *c_void, idx: c_int);
    pub fn TCOD_list_begin(l: TCOD_list_t) -> *mut *mut c_void;
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut c_void;
    pub fn TCOD_list_reverse(l: TCOD_list_t);
    pub fn TCOD_list_remove_iterator(l: TCOD_list_t, elt: *mut *mut c_void) ->
     *mut *mut c_void;
    pub fn TCOD_list_remove(l: TCOD_list_t, elt: *c_void);
    pub fn TCOD_list_remove_iterator_fast(l: TCOD_list_t,
                                          elt: *mut *mut c_void) ->
     *mut *mut c_void;
    pub fn TCOD_list_remove_fast(l: TCOD_list_t, elt: *c_void);
    pub fn TCOD_list_contains(l: TCOD_list_t, elt: *c_void) -> _bool;
    pub fn TCOD_list_clear(l: TCOD_list_t);
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
    pub fn TCOD_list_size(l: TCOD_list_t) -> c_int;
    pub fn TCOD_list_insert_before(l: TCOD_list_t, elt: *c_void,
                                   before: c_int) -> *mut *mut c_void;
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> _bool;
    pub fn TCOD_color_RGB(r: uint8, g: uint8, b: uint8) -> TCOD_color_t;
    pub fn TCOD_color_HSV(h: c_float, s: c_float, v: c_float) -> TCOD_color_t;
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> _bool;
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t) ->
     TCOD_color_t;
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t) ->
     TCOD_color_t;
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t, value: c_float) ->
     TCOD_color_t;
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t, coef: c_float)
     -> TCOD_color_t;
    pub fn TCOD_color_set_HSV(c: *mut TCOD_color_t, h: c_float, s: c_float,
                              v: c_float);
    pub fn TCOD_color_get_HSV(c: TCOD_color_t, h: *mut c_float,
                              s: *mut c_float, v: *mut c_float);
    pub fn TCOD_color_get_hue(c: TCOD_color_t) -> c_float;
    pub fn TCOD_color_set_hue(c: *mut TCOD_color_t, h: c_float);
    pub fn TCOD_color_get_saturation(c: TCOD_color_t) -> c_float;
    pub fn TCOD_color_set_saturation(c: *mut TCOD_color_t, s: c_float);
    pub fn TCOD_color_get_value(c: TCOD_color_t) -> c_float;
    pub fn TCOD_color_set_value(c: *mut TCOD_color_t, v: c_float);
    pub fn TCOD_color_shift_hue(c: *mut TCOD_color_t, hshift: c_float);
    pub fn TCOD_color_scale_HSV(c: *mut TCOD_color_t, scoef: c_float,
                                vcoef: c_float);
    pub fn TCOD_color_gen_map(map: *mut TCOD_color_t, nb_key: c_int,
                              key_color: *TCOD_color_t, key_index: *c_int);
    pub fn TCOD_console_init_root(w: c_int, h: c_int, title: *c_schar,
                                  fullscreen: _bool,
                                  renderer: TCOD_renderer_t);
    pub fn TCOD_console_set_window_title(title: *c_schar);
    pub fn TCOD_console_set_fullscreen(fullscreen: _bool);
    pub fn TCOD_console_is_fullscreen() -> _bool;
    pub fn TCOD_console_is_window_closed() -> _bool;
    pub fn TCOD_console_set_custom_font(fontFile: *c_schar, flags: c_int,
                                        nb_char_horiz: c_int,
                                        nb_char_vertic: c_int);
    pub fn TCOD_console_map_ascii_code_to_font(asciiCode: c_int,
                                               fontCharX: c_int,
                                               fontCharY: c_int);
    pub fn TCOD_console_map_ascii_codes_to_font(asciiCode: c_int,
                                                nbCodes: c_int,
                                                fontCharX: c_int,
                                                fontCharY: c_int);
    pub fn TCOD_console_map_string_to_font(s: *c_schar, fontCharX: c_int,
                                           fontCharY: c_int);
    pub fn TCOD_console_set_dirty(x: c_int, y: c_int, w: c_int, h: c_int);
    pub fn TCOD_console_set_default_background(con: TCOD_console_t,
                                               col: TCOD_color_t);
    pub fn TCOD_console_set_default_foreground(con: TCOD_console_t,
                                               col: TCOD_color_t);
    pub fn TCOD_console_clear(con: TCOD_console_t);
    pub fn TCOD_console_set_char_background(con: TCOD_console_t, x: c_int,
                                            y: c_int, col: TCOD_color_t,
                                            flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_set_char_foreground(con: TCOD_console_t, x: c_int,
                                            y: c_int, col: TCOD_color_t);
    pub fn TCOD_console_set_char(con: TCOD_console_t, x: c_int, y: c_int,
                                 c: c_int);
    pub fn TCOD_console_put_char(con: TCOD_console_t, x: c_int, y: c_int,
                                 c: c_int, flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_put_char_ex(con: TCOD_console_t, x: c_int, y: c_int,
                                    c: c_int, fore: TCOD_color_t,
                                    back: TCOD_color_t);
    pub fn TCOD_console_set_background_flag(con: TCOD_console_t,
                                            flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_get_background_flag(con: TCOD_console_t) ->
     TCOD_bkgnd_flag_t;
    pub fn TCOD_console_set_alignment(con: TCOD_console_t,
                                      alignment: TCOD_alignment_t);
    pub fn TCOD_console_get_alignment(con: TCOD_console_t) ->
     TCOD_alignment_t;
    pub fn TCOD_console_print(con: TCOD_console_t, x: c_int, y: c_int,
                              fmt: *c_schar, ...);
    pub fn TCOD_console_print_ex(con: TCOD_console_t, x: c_int, y: c_int,
                                 flag: TCOD_bkgnd_flag_t,
                                 alignment: TCOD_alignment_t,
                                 fmt: *c_schar, ...);
    pub fn TCOD_console_print_rect(con: TCOD_console_t, x: c_int, y: c_int,
                                   w: c_int, h: c_int, fmt: *c_schar, ...) ->
     c_int;
    pub fn TCOD_console_print_rect_ex(con: TCOD_console_t, x: c_int, y: c_int,
                                      w: c_int, h: c_int,
                                      flag: TCOD_bkgnd_flag_t,
                                      alignment: TCOD_alignment_t,
                                      fmt: *c_schar, ...) -> c_int;
    pub fn TCOD_console_get_height_rect(con: TCOD_console_t, x: c_int,
                                        y: c_int, w: c_int, h: c_int,
                                        fmt: *c_schar, ...) -> c_int;
    pub fn TCOD_console_rect(con: TCOD_console_t, x: c_int, y: c_int,
                             w: c_int, h: c_int, clear: _bool,
                             flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_hline(con: TCOD_console_t, x: c_int, y: c_int,
                              l: c_int, flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_vline(con: TCOD_console_t, x: c_int, y: c_int,
                              l: c_int, flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_print_frame(con: TCOD_console_t, x: c_int, y: c_int,
                                    w: c_int, h: c_int, empty: _bool,
                                    flag: TCOD_bkgnd_flag_t,
                                    fmt: *c_schar, ...);
    pub fn TCOD_console_map_string_to_font_utf(s: *wchar_t, fontCharX: c_int,
                                               fontCharY: c_int);
    pub fn TCOD_console_print_utf(con: TCOD_console_t, x: c_int, y: c_int,
                                  fmt: *wchar_t, ...);
    pub fn TCOD_console_print_ex_utf(con: TCOD_console_t, x: c_int, y: c_int,
                                     flag: TCOD_bkgnd_flag_t,
                                     alignment: TCOD_alignment_t,
                                     fmt: *wchar_t, ...);
    pub fn TCOD_console_print_rect_utf(con: TCOD_console_t, x: c_int,
                                       y: c_int, w: c_int, h: c_int,
                                       fmt: *wchar_t, ...) -> c_int;
    pub fn TCOD_console_print_rect_ex_utf(con: TCOD_console_t, x: c_int,
                                          y: c_int, w: c_int, h: c_int,
                                          flag: TCOD_bkgnd_flag_t,
                                          alignment: TCOD_alignment_t,
                                          fmt: *wchar_t, ...) -> c_int;
    pub fn TCOD_console_get_height_rect_utf(con: TCOD_console_t, x: c_int,
                                            y: c_int, w: c_int, h: c_int,
                                            fmt: *wchar_t, ...) -> c_int;
    pub fn TCOD_console_get_default_background(con: TCOD_console_t) ->
     TCOD_color_t;
    pub fn TCOD_console_get_default_foreground(con: TCOD_console_t) ->
     TCOD_color_t;
    pub fn TCOD_console_get_char_background(con: TCOD_console_t, x: c_int,
                                            y: c_int) -> TCOD_color_t;
    pub fn TCOD_console_get_char_foreground(con: TCOD_console_t, x: c_int,
                                            y: c_int) -> TCOD_color_t;
    pub fn TCOD_console_get_char(con: TCOD_console_t, x: c_int, y: c_int) ->
     c_int;
    pub fn TCOD_console_set_fade(val: uint8, fade: TCOD_color_t);
    pub fn TCOD_console_get_fade() -> uint8;
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
    pub fn TCOD_console_flush();
    pub fn TCOD_console_set_color_control(con: TCOD_colctrl_t,
                                          fore: TCOD_color_t,
                                          back: TCOD_color_t);
    pub fn TCOD_console_check_for_keypress(flags: c_int) -> TCOD_key_t;
    pub fn TCOD_console_wait_for_keypress(flush: _bool) -> TCOD_key_t;
    pub fn TCOD_console_set_keyboard_repeat(initial_delay: c_int,
                                            interval: c_int);
    pub fn TCOD_console_disable_keyboard_repeat();
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> _bool;
    pub fn TCOD_console_from_file(filename: *c_schar) -> TCOD_console_t;
    pub fn TCOD_console_load_asc(con: TCOD_console_t, filename: *c_schar) ->
     _bool;
    pub fn TCOD_console_load_apf(con: TCOD_console_t, filename: *c_schar) ->
     _bool;
    pub fn TCOD_console_save_asc(con: TCOD_console_t, filename: *c_schar) ->
     _bool;
    pub fn TCOD_console_save_apf(con: TCOD_console_t, filename: *c_schar) ->
     _bool;
    pub fn TCOD_console_new(w: c_int, h: c_int) -> TCOD_console_t;
    pub fn TCOD_console_get_width(con: TCOD_console_t) -> c_int;
    pub fn TCOD_console_get_height(con: TCOD_console_t) -> c_int;
    pub fn TCOD_console_set_key_color(con: TCOD_console_t, col: TCOD_color_t);
    pub fn TCOD_console_blit(src: TCOD_console_t, xSrc: c_int, ySrc: c_int,
                             wSrc: c_int, hSrc: c_int, dst: TCOD_console_t,
                             xDst: c_int, yDst: c_int,
                             foreground_alpha: c_float,
                             background_alpha: c_float);
    pub fn TCOD_console_delete(console: TCOD_console_t);
    pub fn TCOD_console_credits();
    pub fn TCOD_console_credits_reset();
    pub fn TCOD_console_credits_render(x: c_int, y: c_int, alpha: _bool) ->
     _bool;
    pub fn TCOD_image_new(width: c_int, height: c_int) -> TCOD_image_t;
    pub fn TCOD_image_from_console(console: TCOD_console_t) -> TCOD_image_t;
    pub fn TCOD_image_refresh_console(image: TCOD_image_t,
                                      console: TCOD_console_t);
    pub fn TCOD_image_load(filename: *c_schar) -> TCOD_image_t;
    pub fn TCOD_image_clear(image: TCOD_image_t, color: TCOD_color_t);
    pub fn TCOD_image_invert(image: TCOD_image_t);
    pub fn TCOD_image_hflip(image: TCOD_image_t);
    pub fn TCOD_image_rotate90(image: TCOD_image_t, numRotations: c_int);
    pub fn TCOD_image_vflip(image: TCOD_image_t);
    pub fn TCOD_image_scale(image: TCOD_image_t, neww: c_int, newh: c_int);
    pub fn TCOD_image_save(image: TCOD_image_t, filename: *c_schar);
    pub fn TCOD_image_get_size(image: TCOD_image_t, w: *mut c_int,
                               h: *mut c_int);
    pub fn TCOD_image_get_pixel(image: TCOD_image_t, x: c_int, y: c_int) ->
     TCOD_color_t;
    pub fn TCOD_image_get_alpha(image: TCOD_image_t, x: c_int, y: c_int) ->
     c_int;
    pub fn TCOD_image_get_mipmap_pixel(image: TCOD_image_t, x0: c_float,
                                       y0: c_float, x1: c_float, y1: c_float)
     -> TCOD_color_t;
    pub fn TCOD_image_put_pixel(image: TCOD_image_t, x: c_int, y: c_int,
                                col: TCOD_color_t);
    pub fn TCOD_image_blit(image: TCOD_image_t, console: TCOD_console_t,
                           x: c_float, y: c_float,
                           bkgnd_flag: TCOD_bkgnd_flag_t, scalex: c_float,
                           scaley: c_float, angle: c_float);
    pub fn TCOD_image_blit_rect(image: TCOD_image_t, console: TCOD_console_t,
                                x: c_int, y: c_int, w: c_int, h: c_int,
                                bkgnd_flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_image_blit_2x(image: TCOD_image_t, dest: TCOD_console_t,
                              dx: c_int, dy: c_int, sx: c_int, sy: c_int,
                              w: c_int, h: c_int);
    pub fn TCOD_image_delete(image: TCOD_image_t);
    pub fn TCOD_image_set_key_color(image: TCOD_image_t,
                                    key_color: TCOD_color_t);
    pub fn TCOD_image_is_pixel_transparent(image: TCOD_image_t, x: c_int,
                                           y: c_int) -> _bool;
    pub fn TCOD_mouse_show_cursor(visible: _bool);
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
    pub fn TCOD_mouse_is_cursor_visible() -> _bool;
    pub fn TCOD_mouse_move(x: c_int, y: c_int);
    pub fn TCOD_mouse_includes_touch(enable: _bool);
    pub fn TCOD_sys_elapsed_milli() -> uint32;
    pub fn TCOD_sys_elapsed_seconds() -> c_float;
    pub fn TCOD_sys_sleep_milli(val: uint32);
    pub fn TCOD_sys_save_screenshot(filename: *c_schar);
    pub fn TCOD_sys_force_fullscreen_resolution(width: c_int, height: c_int);
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t);
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
    pub fn TCOD_sys_set_fps(val: c_int);
    pub fn TCOD_sys_get_fps() -> c_int;
    pub fn TCOD_sys_get_last_frame_length() -> c_float;
    pub fn TCOD_sys_get_current_resolution(w: *mut c_int, h: *mut c_int);
    pub fn TCOD_sys_get_fullscreen_offsets(offx: *mut c_int,
                                           offy: *mut c_int);
    pub fn TCOD_sys_update_char(asciiCode: c_int, fontx: c_int, fonty: c_int,
                                img: TCOD_image_t, x: c_int, y: c_int);
    pub fn TCOD_sys_get_char_size(w: *mut c_int, h: *mut c_int);
    pub fn TCOD_sys_get_sdl_window() -> *mut c_void;
    pub fn TCOD_sys_wait_for_event(eventMask: c_int, key: *mut TCOD_key_t,
                                   mouse: *mut TCOD_mouse_t, flush: _bool) ->
     TCOD_event_t;
    pub fn TCOD_sys_check_for_event(eventMask: c_int, key: *mut TCOD_key_t,
                                    mouse: *mut TCOD_mouse_t) -> TCOD_event_t;
    pub fn TCOD_sys_create_directory(path: *c_schar) -> _bool;
    pub fn TCOD_sys_delete_file(path: *c_schar) -> _bool;
    pub fn TCOD_sys_delete_directory(path: *c_schar) -> _bool;
    pub fn TCOD_sys_is_directory(path: *c_schar) -> _bool;
    pub fn TCOD_sys_get_directory_content(path: *c_schar, pattern: *c_schar)
     -> TCOD_list_t;
    pub fn TCOD_sys_file_exists(filename: *c_schar, ...) -> _bool;
    pub fn TCOD_sys_read_file(filename: *c_schar, buf: *mut *mut c_uchar,
                              size: *mut uint32) -> _bool;
    pub fn TCOD_sys_write_file(filename: *c_schar, buf: *mut c_uchar,
                               size: uint32) -> _bool;
    pub fn TCOD_sys_clipboard_set(value: *c_schar);
    pub fn TCOD_sys_clipboard_get() -> *mut c_schar;
    pub fn TCOD_thread_new(func:
                               ::std::option::Option<extern "C" fn
                                                         (arg1: *mut c_void)
                                                         -> c_int>,
                           data: *mut c_void) -> TCOD_thread_t;
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
    pub fn TCOD_sys_get_num_cores() -> c_int;
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
    pub fn TCOD_mutex_in(_mut: TCOD_mutex_t);
    pub fn TCOD_mutex_out(_mut: TCOD_mutex_t);
    pub fn TCOD_mutex_delete(_mut: TCOD_mutex_t);
    pub fn TCOD_semaphore_new(initVal: c_int) -> TCOD_semaphore_t;
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
    pub fn TCOD_condition_new() -> TCOD_cond_t;
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, _mut: TCOD_mutex_t);
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
    pub fn TCOD_load_library(path: *c_schar) -> TCOD_library_t;
    pub fn TCOD_get_function_address(library: TCOD_library_t,
                                     function_name: *c_schar) -> *mut c_void;
    pub fn TCOD_close_library(arg1: TCOD_library_t);
    pub fn TCOD_sys_register_SDL_renderer(renderer: SDL_renderer_t);
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
    pub fn TCOD_random_restore(mersenne: TCOD_random_t,
                               backup: TCOD_random_t);
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: uint32)
     -> TCOD_random_t;
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t,
                                        distribution: TCOD_distribution_t);
    pub fn TCOD_random_get_int(mersenne: TCOD_random_t, min: c_int,
                               max: c_int) -> c_int;
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t, min: c_float,
                                 max: c_float) -> c_float;
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t, min: c_double,
                                  max: c_double) -> c_double;
    pub fn TCOD_random_get_int_mean(mersenne: TCOD_random_t, min: c_int,
                                    max: c_int, mean: c_int) -> c_int;
    pub fn TCOD_random_get_float_mean(mersenne: TCOD_random_t, min: c_float,
                                      max: c_float, mean: c_float) -> c_float;
    pub fn TCOD_random_get_double_mean(mersenne: TCOD_random_t, min: c_double,
                                       max: c_double, mean: c_double) ->
     c_double;
    pub fn TCOD_random_dice_new(s: *c_schar) -> TCOD_dice_t;
    pub fn TCOD_random_dice_roll(mersenne: TCOD_random_t, dice: TCOD_dice_t)
     -> c_int;
    pub fn TCOD_random_dice_roll_s(mersenne: TCOD_random_t, s: *c_schar) ->
     c_int;
    pub fn TCOD_line_init(xFrom: c_int, yFrom: c_int, xTo: c_int, yTo: c_int);
    pub fn TCOD_line_step(xCur: *mut c_int, yCur: *mut c_int) -> _bool;
    pub fn TCOD_line(xFrom: c_int, yFrom: c_int, xTo: c_int, yTo: c_int,
                     listener: TCOD_line_listener_t) -> _bool;
    pub fn TCOD_line_init_mt(xFrom: c_int, yFrom: c_int, xTo: c_int,
                             yTo: c_int, data: *mut TCOD_bresenham_data_t);
    pub fn TCOD_line_step_mt(xCur: *mut c_int, yCur: *mut c_int,
                             data: *mut TCOD_bresenham_data_t) -> _bool;
    pub fn TCOD_line_mt(xFrom: c_int, yFrom: c_int, xTo: c_int, yTo: c_int,
                        listener: TCOD_line_listener_t,
                        data: *mut TCOD_bresenham_data_t) -> _bool;
    pub fn TCOD_noise_new(dimensions: c_int, hurst: c_float,
                          lacunarity: c_float, random: TCOD_random_t) ->
     TCOD_noise_t;
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, _type: TCOD_noise_type_t);
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut c_float,
                             _type: TCOD_noise_type_t) -> c_float;
    pub fn TCOD_noise_get_fbm_ex(noise: TCOD_noise_t, f: *mut c_float,
                                 octaves: c_float, _type: TCOD_noise_type_t)
     -> c_float;
    pub fn TCOD_noise_get_turbulence_ex(noise: TCOD_noise_t, f: *mut c_float,
                                        octaves: c_float,
                                        _type: TCOD_noise_type_t) -> c_float;
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut c_float) -> c_float;
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut c_float,
                              octaves: c_float) -> c_float;
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t, f: *mut c_float,
                                     octaves: c_float) -> c_float;
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
    pub fn TCOD_map_new(width: c_int, height: c_int) -> TCOD_map_t;
    pub fn TCOD_map_clear(map: TCOD_map_t, transparent: _bool,
                          walkable: _bool);
    pub fn TCOD_map_copy(source: TCOD_map_t, dest: TCOD_map_t);
    pub fn TCOD_map_set_properties(map: TCOD_map_t, x: c_int, y: c_int,
                                   is_transparent: _bool, is_walkable: _bool);
    pub fn TCOD_map_delete(map: TCOD_map_t);
    pub fn TCOD_map_compute_fov(map: TCOD_map_t, player_x: c_int,
                                player_y: c_int, max_radius: c_int,
                                light_walls: _bool,
                                algo: TCOD_fov_algorithm_t);
    pub fn TCOD_map_is_in_fov(map: TCOD_map_t, x: c_int, y: c_int) -> _bool;
    pub fn TCOD_map_set_in_fov(map: TCOD_map_t, x: c_int, y: c_int,
                               fov: _bool);
    pub fn TCOD_map_is_transparent(map: TCOD_map_t, x: c_int, y: c_int) ->
     _bool;
    pub fn TCOD_map_is_walkable(map: TCOD_map_t, x: c_int, y: c_int) -> _bool;
    pub fn TCOD_map_get_width(map: TCOD_map_t) -> c_int;
    pub fn TCOD_map_get_height(map: TCOD_map_t) -> c_int;
    pub fn TCOD_map_get_nb_cells(map: TCOD_map_t) -> c_int;
    pub fn TCOD_path_new_using_map(map: TCOD_map_t, diagonalCost: c_float) ->
     TCOD_path_t;
    pub fn TCOD_path_new_using_function(map_width: c_int, map_height: c_int,
                                        func: TCOD_path_func_t,
                                        user_data: *mut c_void,
                                        diagonalCost: c_float) -> TCOD_path_t;
    pub fn TCOD_path_compute(path: TCOD_path_t, ox: c_int, oy: c_int,
                             dx: c_int, dy: c_int) -> _bool;
    pub fn TCOD_path_walk(path: TCOD_path_t, x: *mut c_int, y: *mut c_int,
                          recalculate_when_needed: _bool) -> _bool;
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> _bool;
    pub fn TCOD_path_size(path: TCOD_path_t) -> c_int;
    pub fn TCOD_path_reverse(path: TCOD_path_t);
    pub fn TCOD_path_get(path: TCOD_path_t, index: c_int, x: *mut c_int,
                         y: *mut c_int);
    pub fn TCOD_path_get_origin(path: TCOD_path_t, x: *mut c_int,
                                y: *mut c_int);
    pub fn TCOD_path_get_destination(path: TCOD_path_t, x: *mut c_int,
                                     y: *mut c_int);
    pub fn TCOD_path_delete(path: TCOD_path_t);
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: c_float) ->
     TCOD_dijkstra_t;
    pub fn TCOD_dijkstra_new_using_function(map_width: c_int,
                                            map_height: c_int,
                                            func: TCOD_path_func_t,
                                            user_data: *mut c_void,
                                            diagonalCost: c_float) ->
     TCOD_dijkstra_t;
    pub fn TCOD_dijkstra_compute(dijkstra: TCOD_dijkstra_t, root_x: c_int,
                                 root_y: c_int);
    pub fn TCOD_dijkstra_get_distance(dijkstra: TCOD_dijkstra_t, x: c_int,
                                      y: c_int) -> c_float;
    pub fn TCOD_dijkstra_path_set(dijkstra: TCOD_dijkstra_t, x: c_int,
                                  y: c_int) -> _bool;
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> _bool;
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> c_int;
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
    pub fn TCOD_dijkstra_get(path: TCOD_dijkstra_t, index: c_int,
                             x: *mut c_int, y: *mut c_int);
    pub fn TCOD_dijkstra_path_walk(dijkstra: TCOD_dijkstra_t, x: *mut c_int,
                                   y: *mut c_int) -> _bool;
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
    pub fn TCOD_lex_new(symbols: *mut *c_schar, keywords: *mut *c_schar,
                        simpleComment: *c_schar, commentStart: *c_schar,
                        commentStop: *c_schar, javadocCommentStart: *c_schar,
                        stringDelim: *c_schar, flags: c_int) ->
     *mut TCOD_lex_t;
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t, dat: *mut c_schar);
    pub fn TCOD_lex_set_data_file(lex: *mut TCOD_lex_t, filename: *c_schar) ->
     _bool;
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> c_int;
    pub fn TCOD_lex_parse_until_token_type(lex: *mut TCOD_lex_t,
                                           token_type: c_int) -> c_int;
    pub fn TCOD_lex_parse_until_token_value(lex: *mut TCOD_lex_t,
                                            token_value: *c_schar) -> c_int;
    pub fn TCOD_lex_expect_token_type(lex: *mut TCOD_lex_t, token_type: c_int)
     -> _bool;
    pub fn TCOD_lex_expect_token_value(lex: *mut TCOD_lex_t,
                                       token_type: c_int,
                                       token_value: *c_schar) -> _bool;
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t) -> *mut c_schar;
    pub fn TCOD_lex_get_token_name(token_type: c_int) -> *c_schar;
    pub fn TCOD_lex_get_last_error() -> *mut c_schar;
    pub fn TCOD_lex_hextoint(c: c_schar) -> c_int;
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t) -> *c_schar;
    pub fn TCOD_struct_add_property(def: TCOD_parser_struct_t, name: *c_schar,
                                    _type: TCOD_value_type_t,
                                    mandatory: _bool);
    pub fn TCOD_struct_add_list_property(def: TCOD_parser_struct_t,
                                         name: *c_schar,
                                         _type: TCOD_value_type_t,
                                         mandatory: _bool);
    pub fn TCOD_struct_add_value_list(def: TCOD_parser_struct_t,
                                      name: *c_schar,
                                      value_list: *mut *c_schar,
                                      mandatory: _bool);
    pub fn TCOD_struct_add_value_list_sized(def: TCOD_parser_struct_t,
                                            name: *c_schar,
                                            value_list: *mut *c_schar,
                                            size: c_int, mandatory: _bool);
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t,
                                propname: *c_schar);
    pub fn TCOD_struct_add_structure(def: TCOD_parser_struct_t,
                                     sub_structure: TCOD_parser_struct_t);
    pub fn TCOD_struct_is_mandatory(def: TCOD_parser_struct_t,
                                    propname: *c_schar) -> _bool;
    pub fn TCOD_struct_get_type(def: TCOD_parser_struct_t, propname: *c_schar)
     -> TCOD_value_type_t;
    pub fn TCOD_parser_new() -> TCOD_parser_t;
    pub fn TCOD_parser_new_struct(parser: TCOD_parser_t, name: *mut c_schar)
     -> TCOD_parser_struct_t;
    pub fn TCOD_parser_new_custom_type(parser: TCOD_parser_t,
                                       custom_type_parser:
                                           TCOD_parser_custom_t) ->
     TCOD_value_type_t;
    pub fn TCOD_parser_run(parser: TCOD_parser_t, filename: *c_schar,
                           listener: *mut TCOD_parser_listener_t);
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
    pub fn TCOD_parser_error(msg: *c_schar, ...);
    pub fn TCOD_parser_get_bool_property(parser: TCOD_parser_t,
                                         name: *c_schar) -> _bool;
    pub fn TCOD_parser_get_char_property(parser: TCOD_parser_t,
                                         name: *c_schar) -> c_int;
    pub fn TCOD_parser_get_int_property(parser: TCOD_parser_t, name: *c_schar)
     -> c_int;
    pub fn TCOD_parser_get_float_property(parser: TCOD_parser_t,
                                          name: *c_schar) -> c_float;
    pub fn TCOD_parser_get_string_property(parser: TCOD_parser_t,
                                           name: *c_schar) -> *c_schar;
    pub fn TCOD_parser_get_color_property(parser: TCOD_parser_t,
                                          name: *c_schar) -> TCOD_color_t;
    pub fn TCOD_parser_get_dice_property(parser: TCOD_parser_t,
                                         name: *c_schar) -> TCOD_dice_t;
    pub fn TCOD_parser_get_dice_property_py(parser: TCOD_parser_t,
                                            name: *c_schar,
                                            dice: *mut TCOD_dice_t);
    pub fn TCOD_parser_get_custom_property(parser: TCOD_parser_t,
                                           name: *c_schar) -> *mut c_void;
    pub fn TCOD_parser_get_list_property(parser: TCOD_parser_t,
                                         name: *c_schar,
                                         _type: TCOD_value_type_t) ->
     TCOD_list_t;
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
    pub fn TCOD_parse_value_list_value(def: *mut TCOD_struct_int_t,
                                       listnum: c_int) -> TCOD_value_t;
    pub fn TCOD_parse_property_value(parser: *mut TCOD_parser_int_t,
                                     def: TCOD_parser_struct_t,
                                     propname: *mut c_schar, list: _bool) ->
     TCOD_value_t;
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_new_with_size(x: c_int, y: c_int, w: c_int, h: c_int) ->
     *mut TCOD_bsp_t;
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
    pub fn TCOD_bsp_left(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_right(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_father(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_is_leaf(node: *mut TCOD_bsp_t) -> _bool;
    pub fn TCOD_bsp_traverse_pre_order(node: *mut TCOD_bsp_t,
                                       listener: TCOD_bsp_callback_t,
                                       userData: *mut c_void) -> _bool;
    pub fn TCOD_bsp_traverse_in_order(node: *mut TCOD_bsp_t,
                                      listener: TCOD_bsp_callback_t,
                                      userData: *mut c_void) -> _bool;
    pub fn TCOD_bsp_traverse_post_order(node: *mut TCOD_bsp_t,
                                        listener: TCOD_bsp_callback_t,
                                        userData: *mut c_void) -> _bool;
    pub fn TCOD_bsp_traverse_level_order(node: *mut TCOD_bsp_t,
                                         listener: TCOD_bsp_callback_t,
                                         userData: *mut c_void) -> _bool;
    pub fn TCOD_bsp_traverse_inverted_level_order(node: *mut TCOD_bsp_t,
                                                  listener:
                                                      TCOD_bsp_callback_t,
                                                  userData: *mut c_void) ->
     _bool;
    pub fn TCOD_bsp_contains(node: *mut TCOD_bsp_t, x: c_int, y: c_int) ->
     _bool;
    pub fn TCOD_bsp_find_node(node: *mut TCOD_bsp_t, x: c_int, y: c_int) ->
     *mut TCOD_bsp_t;
    pub fn TCOD_bsp_resize(node: *mut TCOD_bsp_t, x: c_int, y: c_int,
                           w: c_int, h: c_int);
    pub fn TCOD_bsp_split_once(node: *mut TCOD_bsp_t, horizontal: _bool,
                               position: c_int);
    pub fn TCOD_bsp_split_recursive(node: *mut TCOD_bsp_t,
                                    randomizer: TCOD_random_t, nb: c_int,
                                    minHSize: c_int, minVSize: c_int,
                                    maxHRatio: c_float, maxVRatio: c_float);
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
    pub fn TCOD_heightmap_new(w: c_int, h: c_int) -> *mut TCOD_heightmap_t;
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_get_value(hm: *TCOD_heightmap_t, x: c_int, y: c_int)
     -> c_float;
    pub fn TCOD_heightmap_get_interpolated_value(hm: *TCOD_heightmap_t,
                                                 x: c_float, y: c_float) ->
     c_float;
    pub fn TCOD_heightmap_set_value(hm: *mut TCOD_heightmap_t, x: c_int,
                                    y: c_int, value: c_float);
    pub fn TCOD_heightmap_get_slope(hm: *TCOD_heightmap_t, x: c_int, y: c_int)
     -> c_float;
    pub fn TCOD_heightmap_get_normal(hm: *TCOD_heightmap_t, x: c_float,
                                     y: c_float, n: [c_float, ..3u],
                                     waterLevel: c_float);
    pub fn TCOD_heightmap_count_cells(hm: *TCOD_heightmap_t, min: c_float,
                                      max: c_float) -> c_int;
    pub fn TCOD_heightmap_has_land_on_border(hm: *TCOD_heightmap_t,
                                             waterLevel: c_float) -> _bool;
    pub fn TCOD_heightmap_get_minmax(hm: *TCOD_heightmap_t, min: *mut c_float,
                                     max: *mut c_float);
    pub fn TCOD_heightmap_copy(hm_source: *TCOD_heightmap_t,
                               hm_dest: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t, value: c_float);
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t, value: c_float);
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t, min: c_float,
                                max: c_float);
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t, min: c_float,
                                    max: c_float);
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_lerp_hm(hm1: *TCOD_heightmap_t,
                                  hm2: *TCOD_heightmap_t,
                                  hmres: *mut TCOD_heightmap_t,
                                  coef: c_float);
    pub fn TCOD_heightmap_add_hm(hm1: *TCOD_heightmap_t,
                                 hm2: *TCOD_heightmap_t,
                                 hmres: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_multiply_hm(hm1: *TCOD_heightmap_t,
                                      hm2: *TCOD_heightmap_t,
                                      hmres: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_add_hill(hm: *mut TCOD_heightmap_t, hx: c_float,
                                   hy: c_float, hradius: c_float,
                                   hheight: c_float);
    pub fn TCOD_heightmap_dig_hill(hm: *mut TCOD_heightmap_t, hx: c_float,
                                   hy: c_float, hradius: c_float,
                                   hheight: c_float);
    pub fn TCOD_heightmap_dig_bezier(hm: *mut TCOD_heightmap_t,
                                     px: [c_int, ..4u], py: [c_int, ..4u],
                                     startRadius: c_float,
                                     startDepth: c_float, endRadius: c_float,
                                     endDepth: c_float);
    pub fn TCOD_heightmap_rain_erosion(hm: *mut TCOD_heightmap_t,
                                       nbDrops: c_int, erosionCoef: c_float,
                                       sedimentationCoef: c_float,
                                       rnd: TCOD_random_t);
    pub fn TCOD_heightmap_kernel_transform(hm: *mut TCOD_heightmap_t,
                                           kernelsize: c_int, dx: *c_int,
                                           dy: *c_int, weight: *c_float,
                                           minLevel: c_float,
                                           maxLevel: c_float);
    pub fn TCOD_heightmap_add_voronoi(hm: *mut TCOD_heightmap_t,
                                      nbPoints: c_int, nbCoef: c_int,
                                      coef: *c_float, rnd: TCOD_random_t);
    pub fn TCOD_heightmap_add_fbm(hm: *mut TCOD_heightmap_t,
                                  noise: TCOD_noise_t, mulx: c_float,
                                  muly: c_float, addx: c_float, addy: c_float,
                                  octaves: c_float, delta: c_float,
                                  scale: c_float);
    pub fn TCOD_heightmap_scale_fbm(hm: *mut TCOD_heightmap_t,
                                    noise: TCOD_noise_t, mulx: c_float,
                                    muly: c_float, addx: c_float,
                                    addy: c_float, octaves: c_float,
                                    delta: c_float, scale: c_float);
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t,
                                    seaLevel: c_float, rnd: TCOD_random_t);
    pub fn TCOD_zip_new() -> TCOD_zip_t;
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: c_schar);
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: c_int);
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: c_float);
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t, val: *c_schar);
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: TCOD_console_t);
    pub fn TCOD_zip_put_data(zip: TCOD_zip_t, nbBytes: c_int, data: *c_void);
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> uint32;
    pub fn TCOD_zip_save_to_file(zip: TCOD_zip_t, filename: *c_schar) ->
     c_int;
    pub fn TCOD_zip_load_from_file(zip: TCOD_zip_t, filename: *c_schar) ->
     c_int;
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> c_schar;
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> c_int;
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> c_float;
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t) -> *c_schar;
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
    pub fn TCOD_zip_get_data(zip: TCOD_zip_t, nbBytes: c_int,
                             data: *mut c_void) -> c_int;
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> uint32;
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: uint32);
    pub fn TCOD_namegen_parse(filename: *c_schar, random: TCOD_random_t);
    pub fn TCOD_namegen_generate(name: *mut c_schar, allocate: _bool) ->
     *mut c_schar;
    pub fn TCOD_namegen_generate_custom(name: *mut c_schar,
                                        rule: *mut c_schar, allocate: _bool)
     -> *mut c_schar;
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
    pub fn TCOD_namegen_destroy();
    pub fn TCOD_text_init(x: c_int, y: c_int, w: c_int, h: c_int,
                          max_chars: c_int) -> TCOD_text_t;
    pub fn TCOD_text_set_properties(txt: TCOD_text_t, cursor_char: c_int,
                                    blink_interval: c_int, prompt: *c_schar,
                                    tab_size: c_int);
    pub fn TCOD_text_set_colors(txt: TCOD_text_t, fore: TCOD_color_t,
                                back: TCOD_color_t,
                                back_transparency: c_float);
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> _bool;
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *c_schar;
    pub fn TCOD_text_reset(txt: TCOD_text_t);
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
